/** @param {NS} ns **/
export async function main(ns) {
	// let matrix = [
    //     [40, 6, 4,12,42,45,33, 5, 6,22, 1,12,38,47,45]
    //     [27,33,43,12,46, 3, 3,13, 4, 2,45,22, 5,18,42]
    //     [29, 7,35,19, 3,21,18,48, 6,49,27,18,18,50,37]
    //     [11, 2,46,16,19,12,26,27,12,10,25,45,46,16,22]
    //     [10, 8,36,17,21,12,11,45,26,12,32,12,15,23,22]
    //     [32,33,39, 8,16,11,41, 3,33,18, 7,49,10,41,13]
    //     [27,19,50,19,30,47,36,11, 2,35,21, 2,23,46,44]
    //     [ 5,34,19,14, 6,49,31,30,36,23,42,20,21,25,46]
    //     [ 4,18,45, 9,21,11, 2,50,39,33,33,29,39,21,24]
    //     [11,27,26,35,24,49, 4,33,32,12,20, 4,38,43,23]
    //     [ 2,44,32,14,35,50,36,26,41, 7,25,15,36,13,17]
    //     [46, 3,23,38, 6, 6, 7, 1,40,23,30,48, 5,13,30]
    //     [34, 6,49,15,24,17,20, 3,32,50,14,18,10, 6,28]
    //     [13,33, 1,49,46,38,18,20,14, 4,10,47,42,22, 4]
    // ];

	// Here is an example of what spiral order should be:
	// 	[
	// 		[1, 2, 3]
	// 		[4, 5, 6]
	// 		[7, 8, 9]
	// 	]
	// Answer: [1, 2, 3, 6, 9, 8 ,7, 4, 5]
	//
	// Note that the matrix will not always be square:
	// 	[
	// 		[1,  2,  3,  4]
	// 		[5,  6,  7,  8]
	// 		[9, 10, 11, 12]
	// 	]
	let matrix = [
		[1,  2,  3,  4]
		[5,  6,  7,  8]
		[9, 10, 11, 12]
	];

	

	let spiral = spiralize(grid);

	ns.tprint(`Spiral: [${spiral.join(', ')}]`);
}

function spiralize(grid, colIdx = 0, rowIdx = 0) {
	let cols = grid[rowIdx].length;
	let rows = grid[]

	// return Array;
}

function getRow(grid, rowIdx) {

	// return Array;
}

function getCol(grid, colIdx) {
	// return Array;
}